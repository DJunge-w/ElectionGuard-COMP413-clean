import fs from 'fs/promises';
import path from 'path';
import {getBallotCodecsForContext} from '../../src/electionguard/ballot/json';
import {
  getCoreCodecsForContext,
  eitherRightOrFail,
} from '../../src/electionguard/core/json';
import {
  bigIntContext4096,
  bigIntContextFromConstants,
} from '../../src/electionguard/core/group-bigint';
import {GroupContext} from '../../src/electionguard/core/group-common';

describe('compat', () => {
  test('can decode elections generated by electionguard-python', async () => {
    const content = await fs.readFile(
      path.join(
        'test',
        'compat',
        'fixtures',
        '9DE17EF86BDDC04779B6BED6C5FEC75C8736B383F19D023DD4BB7D2CC7F64165.json'
      ),
      'utf-8'
    );
    const artifacts = JSON.parse(content);

    const possiblyManifest = getBallotCodecsForContext(
      bigIntContext4096()
    ).manifestCodec.decode(artifacts.manifest);

    const manifest = eitherRightOrFail(possiblyManifest);
    expect(manifest).toBeTruthy();

    const possiblyElectionContext = getCoreCodecsForContext(
      bigIntContext4096()
    ).electionContextCodec.decode(artifacts.context);

    const electionContext = eitherRightOrFail(possiblyElectionContext);
    expect(electionContext).toBeTruthy();
  });

  test('can decode the sample data', async () => {
    const dir = path.join(
      'test',
      'compat',
      'sample',
      'hamilton-general',
      'election_record'
    );
    let content = await fs.readFile(path.join(dir, 'constants.json'), 'utf-8');
    const constantsJson = JSON.parse(content);
    const possiblyConstants = getCoreCodecsForContext(
      bigIntContext4096()
    ).electionConstantsCodec.decode(constantsJson);
    const constants = eitherRightOrFail(possiblyConstants);
    const groupContext = bigIntContextFromConstants(constants);
    if (groupContext === undefined) {
      throw new Error('oop');
    }

    const bCodecs = getBallotCodecsForContext(groupContext);
    const cCodecs = getCoreCodecsForContext(groupContext);

    content = await fs.readFile(path.join(dir, 'manifest.json'), 'utf-8');
    const manifestJson = JSON.parse(content);
    const possiblyManifest = bCodecs.manifestCodec.decode(manifestJson);
    const manifest = eitherRightOrFail(possiblyManifest);
    expect(manifest).toBeTruthy();
    expect(bCodecs.manifestCodec.encode(manifest)).toStrictEqual(manifestJson);

    content = await fs.readFile(path.join(dir, 'context.json'), 'utf-8');
    const contextJson = JSON.parse(content);
    const possiblyContext = getCoreCodecsForContext(
      groupContext as GroupContext
    ).electionContextCodec.decode(contextJson);
    const context = eitherRightOrFail(possiblyContext);
    expect(context).toBeTruthy();
    expect(cCodecs.electionContextCodec.encode(context)).toStrictEqual(
      contextJson
    );

    content = await fs.readFile(
      path.join(
        dir,
        '..',
        'election_private_data',
        'plaintext_ballots',
        'plaintext_ballot_ballot-8a27eaa6-f1c3-11ec-b605-aaf53b701db4.json'
      ),
      'utf-8'
    );
    const plaintextBallotJson = JSON.parse(content);
    const possiblyPlaintextBallot =
      getBallotCodecsForContext(groupContext).plaintextBallotCodec.decode(
        plaintextBallotJson
      );
    const plaintextBallot = eitherRightOrFail(possiblyPlaintextBallot);
    expect(plaintextBallot).toBeTruthy();
    expect(bCodecs.plaintextBallotCodec.encode(plaintextBallot)).toStrictEqual(
      plaintextBallotJson
    );

    content = await fs.readFile(
      path.join(
        dir,
        '..',
        'election_private_data',
        'ciphertext_ballots',
        'ciphertext_ballot_ballot-8a27eaa6-f1c3-11ec-b605-aaf53b701db4.json'
      ),
      'utf-8'
    );
    const ciphertextBallotJson = JSON.parse(content);
    const possiblyCiphertextBallot =
      bCodecs.ciphertextBallotCodec.decode(ciphertextBallotJson);
    const ciphertextBallot = eitherRightOrFail(possiblyCiphertextBallot);
    expect(ciphertextBallot).toBeTruthy();

    expect(
      bCodecs.ciphertextBallotCodec.encode(ciphertextBallot)
    ).toStrictEqual(ciphertextBallotJson);

    content = await fs.readFile(
      path.join(
        dir,
        'submitted_ballots',
        'submitted_ballot_ballot-8a27eaa6-f1c3-11ec-b605-aaf53b701db4.json'
      ),
      'utf-8'
    );
    const submittedBallotJson = JSON.parse(content);
    const possiblySubmittedBallot =
      bCodecs.submittedBallotCodec.decode(submittedBallotJson);
    const submittedBallot = eitherRightOrFail(possiblySubmittedBallot);
    expect(submittedBallot).toBeTruthy();

    expect(bCodecs.submittedBallotCodec.encode(submittedBallot)).toStrictEqual(
      submittedBallotJson
    );
  });
});
