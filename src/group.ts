// Constants used by ElectionGuard
const Q: number = Math.pow(2, 256) - 189
const P: number = 1044388881413152506691752710716624382579964249047383780384233483283953907971553643537729993126875883902173634017777416360502926082946377942955704498542097614841825246773580689398386320439747911160897731551074903967243883427132918813748016269754522343505285898816777211761912392772914485521155521641049273446207578961939840619466145806859275053476560973295158703823395710210329314709715239251736552384080845836048778667318931418338422443891025911884723433084701207771901944593286624979917391350564662632723703007964229849154756196890615252286533089643184902706926081744149289517418249153634178342075381874131646013444796894582106870531535803666254579602632453103741452569793905551901541856173251385047414840392753585581909950158046256810542678368121278509960520957624737942914600310646609792665012858397381435755902851312071248102599442308951327039250818892493767423329663783709190716162023529669217300939783171415808233146823000766917789286154006042281423733706462905243774854543127239500245873582012663666430583862778167369547603016344242729592244544608279405999759391099775667746401633668308698186721172238255007962658564443858927634850415775348839052026675785694826386930175303143450046575460843879941791946313299322976993405829119
const R: number = ((P - 1) * (Math.pow(Q, -1) % P)) % P
const G: number  = 14245109091294741386751154342323521003543059865261911603340669522218159898070093327838595045175067897363301047764229640327930333001123401070596314469603183633790452807428416775717923182949583875381833912370889874572112086966300498607364501764494811956017881198827400327403252039184448888877644781610594801053753235453382508543906993571248387749420874609737451803650021788641249940534081464232937193671929586747339353451021712752406225276255010281004857233043241332527821911604413582442915993833774890228705495787357234006932755876972632840760599399514028393542345035433135159511099877773857622699742816228063106927776147867040336649025152771036361273329385354927395836330206311072577683892664475070720408447257635606891920123791602538518516524873664205034698194561673019535564273204744076336022130453963648114321050173994259620611015189498335966173440411967562175734606706258335095991140827763942280037063180207172918769921712003400007923888084296685269233298371143630883011213745082207405479978418089917768242592557172834921185990876960527013386693909961093302289646193295725135238595082039133488721800071459503353417574248679728577942863659802016004283193163470835709405666994892499382890912238098413819320185166580019604608311466
const Q_MINUS_ONE: number = Q - 1


class ElementModQ {
    // An element of the smaller `mod q` space, i.e., in [0, Q), where Q is a 256-bit prime.
    private elem: bigint;

    constructor() {
        this.elem = 1n; 
    }

    // TODO:
    // Converts from the element to the representation of bytes by first going through hex.
    // This is preferable to directly accessing `elem`, whose representation might change.
    public toBytes(): Number {
        // return base16decode(this.bnToHex(this.elem));
        return 0;
    }

    // Converts from the element to a regular integer. This is preferable to directly
    // accessing `elem`, whose representation might change.
    public toInt(): Number {
        return Number(this.elem);
    }
    
    // // Converts from the element to the hex representation of bytes. This is preferable to directly
    // // accessing `elem`, whose representation might change.
    // function toHex(): string {

    // }

    // Convert decimal strings to Hex with JS BigInts
    // https://coolaj86.com/articles/convert-decimal-to-hex-with-js-bigints/
    private bnToHex(bn: bigint) {
        bn = BigInt(bn);
      
        var pos = true;
        if (bn < 0) {
          pos = false;
          bn = this.bitnot(bn);
        }
      
        var hex = bn.toString(16);
        if (hex.length % 2) { hex = '0' + hex; }
      
        if (pos && (0x80 & parseInt(hex.slice(0, 2), 16))) {
          hex = '00' + hex;
        }
      
        return hex;
      }
      
    private bitnot(bn: bigint) {
        bn = -bn;
        var bin = (bn).toString(2)
        var prefix = '';
        while (bin.length % 8) { bin = '0' + bin; }
        if ('1' === bin[0] && -1 !== bin.slice(1).indexOf('1')) {
            prefix = '11111111';
        }
        bin = bin.split('').map(function (i) {
            return '0' === i ? '1' : '0';
        }).join('');
        return BigInt('0b' + prefix + bin) + BigInt(1);
    }


}